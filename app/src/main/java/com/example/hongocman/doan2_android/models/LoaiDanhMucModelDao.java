package com.example.hongocman.doan2_android.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.hongocman.doan2_android.models.LoaiDanhMucModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOAI_DANH_MUC_MODEL.
*/
public class LoaiDanhMucModelDao extends AbstractDao<LoaiDanhMucModel, Long> {

    public static final String TABLENAME = "LOAI_DANH_MUC_MODEL";

    /**
     * Properties of entity LoaiDanhMucModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MaLoai = new Property(0, long.class, "MaLoai", true, "MA_LOAI");
        public final static Property TenLoai = new Property(1, String.class, "TenLoai", false, "TEN_LOAI");
    };


    public LoaiDanhMucModelDao(DaoConfig config) {
        super(config);
    }
    
    public LoaiDanhMucModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOAI_DANH_MUC_MODEL' (" + //
                "'MA_LOAI' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: MaLoai
                "'TEN_LOAI' TEXT);"); // 1: TenLoai
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOAI_DANH_MUC_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LoaiDanhMucModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMaLoai());
 
        String TenLoai = entity.getTenLoai();
        if (TenLoai != null) {
            stmt.bindString(2, TenLoai);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LoaiDanhMucModel readEntity(Cursor cursor, int offset) {
        LoaiDanhMucModel entity = new LoaiDanhMucModel( //
            cursor.getLong(offset + 0), // MaLoai
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // TenLoai
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LoaiDanhMucModel entity, int offset) {
        entity.setMaLoai(cursor.getLong(offset + 0));
        entity.setTenLoai(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LoaiDanhMucModel entity, long rowId) {
        entity.setMaLoai(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LoaiDanhMucModel entity) {
        if(entity != null) {
            return entity.getMaLoai();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
